max_cpu_seconds=3

files=list_rotate.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g list_rotate.c -o list_rotate

command=./list_rotate

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="5\n0 1 2 3 4\n0\n"
2 stdin="5\n0 1 2 3 4\n2\n"
3 stdin="5\n0 1 2 3 4\n6\n"
4 stdin="7\n8 2 9 4 1 0 5\n17\n"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:


### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='How many numbers in list?: How many steps to rotate?: [0, 1, 2, 3, 4]\n'
2 expected_stdout='How many numbers in list?: How many steps to rotate?: [3, 4, 0, 1, 2]\n'
3 expected_stdout='How many numbers in list?: How many steps to rotate?: [4, 0, 1, 2, 3]\n'
4 expected_stdout='How many numbers in list?: How many steps to rotate?: [1, 0, 5, 8, 2, 9, 4]\n'
