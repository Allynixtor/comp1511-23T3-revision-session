max_cpu_seconds=3

files=2d_malloc.c

## initially compiled with gcc for expected output
## but no way for me to test with dcc as I don't have it installed - Allynixtor

## compilers=[['gcc']]

## compiler_args=-Wall -Werror -g 2d_malloc.c -o 2d_malloc

compilers=[['dcc']]

compiler_args=--leak-check 2d_malloc.c -o 2d_malloc

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 command=./2d_malloc 1 10
2 command=./2d_malloc 5 7
3 command=./2d_malloc 10 10
4 command=./2d_malloc 11 3


## 1 stdin="1 10\n"
## 2 stdin="5 7\n"
## 3 stdin="10 10\n"
## 4 stdin="11 3\n"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:

### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='   0    1    2    3    4    5    6    7    8    9 \n'
2 expected_stdout='   0    1    2    3    4    5    6 \n   5    6    7    8    9   10   11 \n  10   11   12   13   14   15   16 \n  15   16   17   18   19   20   21 \n  20   21   22   23   24   25   26 \n'
3 expected_stdout='   0    1    2    3    4    5    6    7    8    9 \n  10   11   12   13   14   15   16   17   18   19 \n  20   21   22   23   24   25   26   27   28   29 \n  30   31   32   33   34   35   36   37   38   39 \n  40   41   42   43   44   45   46   47   48   49 \n  50   51   52   53   54   55   56   57   58   59 \n  60   61   62   63   64   65   66   67   68   69 \n  70   71   72   73   74   75   76   77   78   79 \n  80   81   82   83   84   85   86   87   88   89 \n  90   91   92   93   94   95   96   97   98   99 \n'
4 expected_stdout='   0    1    2 \n  11   12   13 \n  22   23   24 \n  33   34   35 \n  44   45   46 \n  55   56   57 \n  66   67   68 \n  77   78   79 \n  88   89   90 \n  99  100  101 \n 110  111  112 \n'
